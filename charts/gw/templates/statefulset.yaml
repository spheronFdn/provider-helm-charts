apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "provider.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ include "provider.fullname" . }}
    {{- include "provider.labels" . | nindent 4 }}
spec:
  replicas: 1
  #strategy:
  #  type: OnDelete
  serviceName: {{ include "provider.fullname" . }}
  selector:
    matchLabels:
      app: {{ include "provider.fullname" . }}
      {{- include "provider.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/cm-scripts: {{ include (print $.Template.BasePath "/configmap-scripts.yaml") . | sha256sum }}
      labels:
        app: {{ include "provider.fullname" . }}
        {{- include "provider.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          command: ["/bin/bash", "/scripts/run.sh"]
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: SPHERON_API_PORT
              value: "{{ .Values.apiport}}"
            - name: SPHERON_DEBUG
              value: "{{ $.Values.debug }}"
            - name: AP_YES
              value: "true"              
            - name: SPHERON_LOG_LEVEL
              value: "info"
            - name: SPHERON_BID_PRICE_STRATEGY
              value: "{{ .Values.bidpricestrategy }}"
{{ if .Values.bidpricescript }}
            - name: SPHERON_BID_PRICE_SCRIPT_PATH
              value: "/scripts/price_script.sh"
{{- end }}
{{ if .Values.whitelist_url }}
            - name: WHITELIST_URL
              value: "{{ .Values.whitelist_url }}"
{{- end }}
{{ if .Values.debug_bid_script }}
            - name: DEBUG_BID_SCRIPT
              value: "{{ .Values.debug_bid_script }}"
{{- end }}

            - name: SPHERON_CLUSTER_K8S
              value: "false"
            - name: KUBE_CONFIG
              value: "{{ .Values.home }}/.kube/config"
            - name: SPHERON_DEPLOYMENT_RUNTIME_CLASS
              value: "none"
            - name: SPHERON_FROM
              value: "{{ .Values.from}}" 
            - name: SPHERON_KEY_SECRET
              value: "{{ .Values.keysecret}}"    
            - name: SPHERON_HOME
              value: "{{ .Values.spheronHome}}"                             

          ports:
            - name: api
              containerPort: {{ .Values.apiport }}
              protocol: TCP
            - name: ws
              containerPort: {{ .Values.wsport }}
              protocol: TCP
            - name: tunnel
              containerPort: {{ .Values.tunnelport }}
              protocol: TCP

          volumeMounts:
            - name: spheron-key
              mountPath: /spheron-key
              readOnly: true
            - name: scripts
              mountPath: /scripts
              readOnly: true
            - name: provider-config-volume
              mountPath: /config
            - name: home
              mountPath: "{{ .Values.home }}"
      volumes:
        - name: spheron-key
          hostPath:
            path: /home/spheron/.spheron
            type: Directory
        - name: scripts
          configMap:
            name: {{ include "provider.fullname" . }}-scripts
            defaultMode: 0744
        - name: provider-config-volume
          hostPath:
            path: /root/.spheron/k8s-config
            type: DirectoryOrCreate
        - name: home
          emptyDir: {}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
